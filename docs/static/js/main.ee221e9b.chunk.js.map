{"version":3,"sources":["components/App.js","serviceWorker.js","index.js","yin-yang1.svg"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","todoInput","React","createRef","addTodo","event","key","current","value","trim","length","setState","prevState","todos","idForTodo","idForActive","push","id","title","completed","removeTodo","index","splice","forEach","i","filterAll","filter","filterActive","filterCompleted","check","idForCompleted","isChecked","state","checkAll","clearCompleted","deleted","j","editing","_this2","react_default","a","createElement","className","src","logo","alt","href","target","rel","map","item","type","onClick","checked","comleted","placeholder","ref","onKeyUp","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.ee221e9b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from '../yin-yang1.svg';\nimport '../App.css';\n//import TodosRemaining from './TodosRemaining';\n//import TodoItem from './TodoItem';\n//import TodosCheckAll from './TodosCheckAll';\n//import TodosFiltered from './TodosFiltered';\n//import TodosClearCompleted from './TodosClearCompleted';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      idForTodo: 5,\n      idForCompleted: 2,\n      idForActive: 4,\n      filter: 'Active',\n      todos: [\n        {\n          'id': 0,\n          'title': 'Finish todo list app1',\n          'completed': false,\n          'editing': false,\n        },\n        {\n          'id': 1,\n          'title': 'Do my todo list for today2',\n          'completed': false,\n          'editing': false,\n        },\n        {\n          'id': 2,\n          'title': 'Finish totododo list app3',\n          'completed': false,\n          'editing': false,\n        },\n        {\n          'id': 3,\n          'title': 'Do my todo list for today4',\n          'completed': true,\n          'editing': false,\n        },\n        {\n          'id': 4,\n          'title': 'Finish todo list app app app5',\n          'completed': false,\n          'editing': false,\n        },\n        {\n          'id': 5,\n          'title': 'Finish6',\n          'completed': true,\n          'editing': false,\n        },\n      ],\n    };\n  }\n  todoInput = React.createRef();\n  \n  addTodo = (event) =>{\n    if(event.key === 'Enter')\n    {\n      const todoInput = this.todoInput.current.value;\n      \n      if(todoInput.trim().length === 0){\n        return;\n      }\n      \n      this.setState((prevState, props) => {\n        let todos = prevState.todos;\n        let idForTodo = prevState.idForTodo + 1;\n        let idForActive = prevState.idForActive + 1;\n        todos.push({\n          id: idForTodo,\n          title: todoInput,\n          completed: false\n        })\n        this.todoInput.current.value = '';\n        return {idForTodo, idForActive, todos};\n      });\n    }\n  }\n  \n  removeTodo = (index) =>{\n    this.setState((prevState, props) =>{\n      let todos = prevState.todos;\n      let idForTodo = prevState.idForTodo - 1;\n      \n      todos.splice(index, 1);\n      todos.forEach((i) => {if(i.id > index) i.id--; });\n      return {idForTodo, todos};\n    });\n    \n  }\n  \n  filterAll = () => {\n    this.setState((prevState, props) => {\n      let filter = prevState.filter;\n      filter = 'All';\n      return {filter};\n    });\n  }  \n  \n  filterActive = () => {\n    this.setState((prevState, props) => {\n      let filter = prevState.filter;\n      filter = 'Active';\n      return {filter};\n    });\n  }  \n  \n  filterCompleted = () => {\n    this.setState((prevState, props) => {\n      let filter = prevState.filter;\n      filter = 'Completed';\n      return {filter};\n    });\n  }\n  \n  check = (index) => {\n    this.setState((prevState, props) => {\n      let todos = prevState.todos;\n      let idForActive = prevState.idForActive;\n      let idForCompleted = prevState.idForCompleted;\n      todos.forEach((i) => {if(i.id === index) i.completed = !i.completed;});\n      if(todos[index].completed === true){\n        idForActive -= 1;\n        idForCompleted += 1;\n        return {todos, idForActive, idForCompleted};\n      }\n      else { \n        idForActive += 1;\n        idForCompleted -=1;\n        return {todos, idForActive, idForCompleted};\n      }\n    });\n  }\n  \n  isChecked = (index) => {\n    if(this.state.todos[index].completed) return true;\n    else return false;\n  }\n  \n  checkAll = () => {\n    this.setState((prevState, props) =>{\n      let todos = prevState.todos;\n      let idForActive = 0;\n      let idForCompleted = prevState.idForTodo + 1;\n      \n      todos.forEach((i) => {i.completed = true});\n      \n      return {todos, idForActive, idForCompleted};\n    })\n  }\n  \n  clearCompleted = () => { //bugged Удаляет элементы через 1\n    this.setState((prevState, props) =>{\n      let todos = prevState.todos;\n      let idForCompleted = 0;\n      let idForTodo = prevState.idForTodo;\n      let deleted;\n      todos.forEach((i) => {\n        if(i.completed){\n          deleted = i.id;\n          idForTodo -= 1;  \n          todos.forEach((j) => {\n            if(j.id > deleted) {\n              j.id--;\n            }\n          });\n          todos.splice(i.id, 1);\n        }\n      });\n      return {todos, idForTodo, idForCompleted};\n    })\n  }\n  \n  \n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <div className = 'App-info'>\n            <p className = 'App-name'>\n              T-O-D-O\n            </p>\n            <a\n              className=\"App-link\"\n              href=\"https://github.com/AndreHollow\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Andre Hollow\n            </a>\n          </div>\n        </header>\n      \n        <section className = 'Todo-container'>\n          <ul className = 'Todo-list'>\n            { this.state.filter === 'All' ?\n                this.state.todos.map(item => (\n                  <li className = 'Todo-item' key={item.id}>\n                    <input id = {item.id} type=\"checkbox\" className = 'checkbox' onClick = {() => this.check(item.id)} checked = {this.isChecked(item.id)} />\n                    <p className = {item.completed ? 'Todo-text-crossed' : 'Todo-text'}>{item.title}</p>\n                    <div className=\"remove-item\" onClick = {(event) => this.removeTodo(item.id)}>&times;</div>\n                  </li>\n                ))\n              : \n              this.state.filter === 'Active' ?\n                this.state.todos.map(item => {\n                  if(!item.completed){\n                  return <li className = 'Todo-item' key={item.id}>\n                    <input type=\"checkbox\" className = 'Uncompleted-box' onClick = {() => this.check(item.id)} />\n                    <p className = {item.comleted ? 'Todo-text-crossed' : 'Todo-text'}>{item.title}</p>\n                    <div className=\"remove-item\" onClick = {(event) => this.removeTodo(item.id)}>&times;</div>\n                  </li>\n              }})\n              :\n              //this.state.filter === 'Completed'\n              this.state.todos.map(item => {\n                if(item.completed){\n                  return <li className = 'Todo-item' key={item.id}>\n                    <input type=\"checkbox\" className = 'Completed-box' checked onClick = {() => this.check(item.id)} />\n                    <p className = 'Todo-text'>{item.title}</p>\n                    <div className=\"remove-item\" onClick = {(event) => this.removeTodo(item.id)}>&times;</div>\n                  </li>\n              }})\n            }\n      \n          </ul>\n        </section>\n        \n        <section className = 'UpperFooter'>\n          <div className = 'UpperFooter-remaining'>\n            {this.state.idForActive} tasks remaining\n          </div>\n          <div className = 'UpperFooter-filter'>\n            <button onClick = {this.filterAll}>All</button>\n            <button onClick = {this.filterActive}>Active</button>\n            <button onClick = {this.filterCompleted}>Completed</button>\n          </div>\n        </section>\n\n        <footer className = 'App-footer'>\n          <div className = 'App-field'>\n            <input type = 'text' className = 'todo-input' placeholder = 'What needs to be done' ref ={this.todoInput} onKeyUp = {this.addTodo}/>\n          </div>\n          <div className = 'Footer-buttons'>\n            <button onClick = {() => this.checkAll()}>Check all</button>\n            <button onClick = {() => this.clearCompleted()}>Clear Complited</button>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/yin-yang1.14f4b902.svg\";"],"sourceRoot":""}